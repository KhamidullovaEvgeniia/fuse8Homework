version: '3.8'

services:
  postgres:
    image: postgres:17.4
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "60001:${DB_PORT}"
    volumes:
       - /DockerData/postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  internal-api:
    container_name: internalapi
    image: internal-api:latest
    build:
      context: .
      dockerfile: InternalApi/Dockerfile
    restart: unless-stopped
    ports:
      - "5243:${INTERNAL_API_REST_PORT}"
      - "5244:${INTERNAL_API_GRPC_PORT}"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: "http://+:${INTERNAL_API_REST_PORT};http://+:${INTERNAL_API_GRPC_PORT};"
      REST_PORT: ${INTERNAL_API_REST_PORT}
      GRPC_PORT: ${INTERNAL_API_GRPC_PORT}
      Kestrel__Endpoints__WebApi__Url: "http://0.0.0.0:${INTERNAL_API_REST_PORT}"
      Kestrel__Endpoints__WebApi__Protocols: "Http1"
      Kestrel__Endpoints__gRPC__Url: "http://0.0.0.0:${INTERNAL_API_GRPC_PORT}"
      Kestrel__Endpoints__gRPC__Protocols: "Http2"
      ConnectionStrings__CurrencyDb: "Host=postgres;Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5243/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

  public-api:
    container_name: publicapi
    image: public-api:latest
    build:
      context: .
      dockerfile: PublicApi/Dockerfile
    restart: unless-stopped
    ports:
      - "5001:${PUBLIC_API_REST_PORT}"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: "http://+:${PUBLIC_API_REST_PORT};"
      ConnectionStrings__CurrencyDb: "Host=postgres;Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD}"
      InternalApi__GrpcEndpoint: "http://internal-api:${INTERNAL_API_GRPC_PORT}"
    depends_on:
      internal-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: